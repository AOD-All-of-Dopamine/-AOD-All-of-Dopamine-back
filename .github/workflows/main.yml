name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: aod-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for required secrets
        run: |
          if [ -z "${{ secrets.EC2_HOST }}" ]; then echo "❌ EC2_HOST secret is not set."; exit 1; fi
          if [ -z "${{ secrets.EC2_USER }}" ]; then echo "❌ EC2_USER secret is not set."; exit 1; fi
          if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then echo "❌ EC2_SSH_PRIVATE_KEY secret is not set."; exit 1; fi
          if [ -z "${{ secrets.POSTGRES_HOST }}" ]; then echo "❌ POSTGRES_HOST secret is not set."; exit 1; fi
          if [ -z "${{ secrets.POSTGRES_USER }}" ]; then echo "❌ POSTGRES_USER secret is not set."; exit 1; fi
          if [ -z "${{ secrets.POSTGRES_PASSWORD }}" ]; then echo "❌ POSTGRES_PASSWORD secret is not set."; exit 1; fi
          echo "✅ All required secrets are present."

      - name: Deploy to EC2 using Docker Compose
        env:
          # SSH 접속 정보
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          # 애플리케이션 환경변수
          APP_IMAGE_URI: ${{ needs.build-and-push.outputs.image }}
          SPRING_PROFILE: prod
          APP_PORT: 8080
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT || '5432' }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'aodDB' }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SELENIUM_URL: ${{ secrets.SELENIUM_URL }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} "mkdir -p /home/${USER}/aod-app"
          scp -i private_key.pem -o StrictHostKeyChecking=no docker-compose.yml ${USER}@${HOST}:/home/${USER}/aod-app/
          
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} << EOF
            cd /home/${USER}/aod-app
            
            export APP_IMAGE_URI="${APP_IMAGE_URI}"
            export SPRING_PROFILE="${SPRING_PROFILE}"
            export APP_PORT="${APP_PORT}"
            export POSTGRES_HOST="${POSTGRES_HOST}"
            export POSTGRES_PORT="${POSTGRES_PORT}"
            export POSTGRES_DB="${POSTGRES_DB}"
            export POSTGRES_USER="${POSTGRES_USER}"
            export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
            export SELENIUM_URL="${SELENIUM_URL}"
            
            docker pull ${APP_IMAGE_URI}
            docker-compose up -d --remove-orphans
            
            echo "Sleeping for 40 seconds to allow the application to start..."
            sleep 40
            
            if curl -f http://localhost:${APP_PORT}/actuator/health > /dev/null 2>&1; then
              echo "✅ Health check successful!"
              docker image prune -af
            else
              echo "❌ Health check failed! Please check the container logs."
              docker-compose logs --tail 100
              exit 1
            fi
            
            echo "✅ Deployment successful! Container status:"
            docker-compose ps
          EOF
          
          rm -f private_key.pem
