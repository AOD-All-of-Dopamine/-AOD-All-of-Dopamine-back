version: '3.8'
# Docker Compose 파일 버전

services:
  #============ 셀레니움 standalone ============
  selenium:
    image: selenium/standalone-chrome:latest
    container_name: aod-selenium
    shm_size: 2gb
    ports:
      - "4444:4444"
    environment:
      - SE_NODE_MAX_SESSIONS=5
    networks:
      - aod-network
    restart: unless-stopped
  # ========== PostgreSQL 데이터베이스 ==========
  postgres:
    image: postgres:16
    container_name: aod-postgres
    # 컨테이너 이름 지정 (docker ps에서 보이는 이름)
    environment:
      # 환경 변수 설정
      POSTGRES_DB: ${POSTGRES_DB:-aodDB}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      # ${변수명:-기본값} 형식
      # .env 파일에 POSTGRES_DB가 있으면 그 값 사용
      # 없으면 aodDB 사용
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
      # 호스트:컨테이너 포트 매핑
      # 호스트의 5432 → 컨테이너의 5432
      # 로컬에서 localhost:5432로 접속 가능
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Named Volume 사용
      # 컨테이너를 삭제해도 데이터는 유지됨
      # 실제 데이터는 Docker가 관리하는 특수 디렉토리에 저장
    networks:
      - aod-network
      # 이 컨테이너가 속할 네트워크
      # 같은 네트워크의 컨테이너끼리는 이름으로 통신 가능

    restart: unless-stopped
    # 컨테이너 재시작 정책
    # unless-stopped: 수동으로 중지하지 않는 한 항상 재시작

  # ========== Spring Boot 애플리케이션 ==========
  app:
    build: .
    container_name: aod-app
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      # ✨ [수정됨] 컨테이너의 시간대를 한국(Asia/Seoul)으로 설정
      TZ: Asia/Seoul
      # JVM의 시간대를 한국으로 강제 설정 (가장 확실한 방법)
      JAVA_TOOL_OPTIONS: "-Duser.timezone=Asia/Seoul"
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE:-prod}
      # Spring Boot 프로파일 설정
      # local/prod에 따라 다른 application-*.properties 사용
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-aodDB}
      # jdbc:postgresql://postgres:5432/aodDB
      # ↑ 여기서 'postgres'는 컨테이너 이름!
      # Docker 네트워크 내부 DNS로 자동 해석됨
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-password}
      SELENIUM_REMOTE_URL: http://selenium:4444/wd/hub
    depends_on:
      - postgres
      - selenium
      # postgres 컨테이너가 먼저 시작되어야 함
      # 주의: postgres가 "완전히 준비"될 때까지 기다리진 않음
      # 단지 "시작"만 기다림
    networks:
      - aod-network
      # postgres와 같은 네트워크
      # 'postgres'라는 이름으로 DB 접속 가능
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      # 헬스체크 명령: curl로 health 엔드포인트 호출
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      # 40초 후부터 체크 시작 (앱 시작 시간 고려)

  # ========== Prometheus (메트릭 수집) ==========
  prometheus:
    image: prom/prometheus:latest
    container_name: aod-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      # 로컬의 설정 파일을 컨테이너 안으로 마운트
      # 설정 파일 수정하면 컨테이너 재시작으로 반영 가능
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus-data:/prometheus
      # 메트릭 데이터 저장 (Named Volume)
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      # Prometheus 시작 옵션들
      - '--storage.tsdb.path=/prometheus'
      # 데이터 저장 경로
      - '--storage.tsdb.retention.time=30d'
      # 30일치 데이터 보관
      - '--web.enable-lifecycle'
      # API로 설정 reload 가능
    networks:
      - aod-network
      # app:8080으로 메트릭 수집 가능
    restart: unless-stopped

  # ========== Grafana (시각화) ==========
  grafana:
    image: grafana/grafana:latest
    container_name: aod-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      # Grafana 관리자 계정
      - GF_USERS_ALLOW_SIGN_UP=false
      # 회원가입 비활성화 (보안)
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
      # Grafana 접속 URL
    volumes:
      - grafana-data:/var/lib/grafana
      # Grafana 설정과 대시보드 저장
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      # 자동 설정 파일들 (데이터소스, 대시보드)
    networks:
      - aod-network
      # prometheus:9090으로 데이터 조회
    restart: unless-stopped
    depends_on:
      - prometheus
      # Prometheus가 먼저 시작되어야 함

  # ========== Alertmanager (알림 관리) ==========
  alertmanager:
    image: prom/alertmanager:latest
    container_name: aod-alertmanager
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - aod-network
    restart: unless-stopped
# ========== 네트워크 정의 ==========
networks:
  aod-network:
    driver: bridge
    # Bridge 네트워크 드라이버 사용
    # 같은 네트워크의 컨테이너끼리 이름으로 통신 가능
    # 예: app → postgres:5432 접속 가능

# ========== 볼륨 정의 ==========
volumes:
  postgres-data:
  # Docker가 관리하는 영구 저장소
  # 실제 위치: /var/lib/docker/volumes/...
  prometheus-data:
  grafana-data:
  alertmanager-data: